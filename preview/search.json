[{"path":"index.html","id":"section","chapter":"","heading":"","text":"","code":""},{"path":"index.html","id":"r-pour-lépidémiologie-appliquée-et-la-santé-publique","chapter":"","heading":"R pour l’épidémiologie appliquée et la santé publique","text":"Ce manuel les objectifs suivants :Établir une base de code de référenceIllustrer comment utiliser R pour effectuer des tâches classiques et récurrentes en épidémiologieAider les épidémiologistes à faire la transition vers RÊtre facilement accessible, y compris dans les endroits ayant une mauvaise connexion internet, grâce à une version hors-ligne \nÉcrit par des épidémiologistes, pour les épidémiologistesNous sommes une équipe d’épidémiologistes venant du monde entier. Nous travaillons bénévolement pour offrir cette ressource à la communauté. Vos encouragements et vos retours sont les bienvenus :Retours structurés via un formulaireCourriel epiRhandbook@gmail.com tweet @epiRhandbook * Soumettre un ticket sur notre répertoire Github","code":""},{"path":"index.html","id":"comment-utiliser-ce-mannuel","chapter":"","heading":"Comment utiliser ce mannuel ?","text":"Naviguez dans la table des matières ou utilisez le formulaire de rechercheCliquez sur le bouton “Copy” pour copier le codeUtilisez les données fournies avec le manuel pour exécuter le code sur votre ordinateurutilisez la section “Ressources” de chaque page pour aller plus loinVersion hors-ligneVoir les instructions dans le chapitre Téléchargement du livre et données pour télécharger le livre.LanguesCe livre été originellement publié en Anglais puis traduit bénévolement par une équipe. Si vous voulez nous aider pour la traduction des prochaines éditions, n’hésitez pas à nous contacter.","code":""},{"path":"index.html","id":"remmerciements","chapter":"","heading":"Remmerciements","text":"Cet ouvrage est le fruit du travail d’une équipe internationale d’épidémiologistes, qui se sont appuyés sur leur expérience auprès d’organisations telles que les agences sanitaires locales, régionales, provinciales et nationales de divers pays, l’Organisation mondiale de la santé (OMS), Médecins Sans Frontières (MSF), les systèmes hospitaliers et les institutions universitaires.Ce guide n’est pas un produit approuvé par une organisation spécifique. Bien que nous nous soyons efforcés à être précis, nous ne pouvons fournir aucune garantie quant au contenu de ce livre.","code":""},{"path":"index.html","id":"auteurs-et-contributeurs","chapter":"","heading":"Auteurs et contributeurs","text":"Editeur: Neale BatraCommité éditorial Neale Batra, Alex Spina, Amrish Baidjoe, Pat Keating, Henry Laurenson-Schafer, Finlay CampbellAuteurs et autrices: Neale Batra, Alex Spina, Paula Blomquist, Finlay Campbell, Henry Laurenson-Schafer, Isaac Florence, Natalie Fischer, Aminata Ndiaye, Liza Coyer, Jonathan Polonsky, Yurie Izawa, Chris Bailey, Daniel Molling, Isha Berry, Emma Buajitti, Mathilde Mousset, Sara Hollis, Wen LinRelecture: Pat Keating, Annick Lenglet, Margot Charette, Danielly Xavier, Esther Kukielka, Michelle Sloan, Aybüke Koyuncu, Rachel Burke, Kate Kelsey, Berhe Etsay, John Rossow, Mackenzie Zendt, James Wright, Laura Haskins, Flavio Finger, Tim Taylor, Jae Hyoung Tim Lee, Brianna Bradley, Wayne Enanoria, Manual Albela Miranda, Molly Mantus, Pattama Ulrich, Joseph Timothy, Adam Vaughan, Olivia Varsaneux, Lionel Monteiro, Joao MuiangaIllustrations: Calder FongTraduction:","code":""},{"path":"index.html","id":"financements","chapter":"","heading":"Financements","text":"Le manuel reçu un financement de soutien via une subvention d’urgence COVID-19 pour le renforcement des capacités de la part de [TEPHINET] (https://www.tephinet.org/), le réseau mondial des programmes de formation en épidémiologie de terrain (FETP).Le réseau des anciens d’EPIET (EAN) fourni un soutien administratif (Annika Wendland en particulier). EPIET est le programme européen de formation en épidémiologie d’intervention.Nous remercions tout particulièrement le Centre Opérationnel d’Amsterdam de Médecins Sans Frontières (MSF OCA) pour son soutien lors de l’élaboration de ce manuel.Cette publication été soutenue par l’accord de coopération numéro NU2GGH001873, financé par les Centers Disease Control Prevention par le biais de TEPHINET, un programme de “Task Force Global Health”. Son contenu relève de la seule responsabilité des auteurs et ne reflète pas les opinions officielles des Centers Disease Control Prevention, du Department Health Human Services, de Task Force Global Health, Inc. ou de TEPHINET.","code":""},{"path":"index.html","id":"inspirations","chapter":"","heading":"Inspirations","text":"Nous nous sommes inspiré de multiples tutoriels, livres et vignettes développés par la communauté pour développer ce manuel. Ces ressources, sont crédités dans les chapitres respectifs, mais nous souhaitons citer quelques sources d’inspiration générales que nous utilisons de manière récurrente :“R4Epis” project (une collaboration entre MSF et RECON)R Epidemics Consortium (RECON)R Data Science book (R4DS)bookdown: Authoring Books Technical Documents R MarkdownNetlify qui héberge ce site","code":""},{"path":"index.html","id":"conditions-dutilisation-et-contribution","chapter":"","heading":"Conditions d’utilisation et contribution","text":"","code":""},{"path":"index.html","id":"license","chapter":"","heading":"License","text":"Ce document est mis à disposition selon les termes de lalicence Creative Commons Attribution - Pas d’Utilisation Commerciale - Partage dans les Mêmes Conditions 4.0 International (CC -NC-SA 4.0) .N’hésitez pas à utiliser les contenus de ce manuel dans vos cours et formations en épidémiologie, ou à le conseiller à vos étudiants. Si vous avez des questions sur l’utilisation que vous souhaitez en faire, envoyez un courriel à epiRhandbook@gmail.com.","code":""},{"path":"index.html","id":"citation","chapter":"","heading":"Citation","text":"Batra, Neale, et al. Epidemiologist R Handbook. 2021. ","code":""},{"path":"index.html","id":"contribuer","chapter":"","heading":"Contribuer","text":"Si vous souhaitez contribuer à cet ouvrage, veuillez d’abord nous contacter via les tickets (issues) Github ou par courriel. Nous sommes en train de développer un calendrier de mise à jour et un guide du contributeur.Veuillez noter que le projet epiRhandbook est publié avec un code de conduite du contributeur. En contribuant à ce projet, vous acceptez de vous conformer à ses conditions.","code":""},{"path":"rbasics.html","id":"rbasics","chapter":"1 R - les bases","heading":"1 R - les bases","text":"Bienvenue !Cette page passe en revue les éléments essentiels de R. Elle n’pas\npour d’être un tutoriel complet, mais elle fournit les bases et peut\nêtre utile pour rafraîchir votre mémoire. La section Ressources pour\nl’apprentissage renvoie à des didacticiels plus complets.Certaines parties de cette page ont été adaptées avec l’autorisation du\nprojet R4Epis.Voir la page sur la transition R pour des conseils\nsur le passage de STATA, SAS ou Excel à R.","code":""},{"path":"rbasics.html","id":"pourquoi-utiliser-r","chapter":"1 R - les bases","heading":"1.1 Pourquoi utiliser R ?","text":"Comme indiqué sur le site Web du projet\nR, R est un langage de\nprogrammation et un environnement pour le calcul statistique et les\ngraphiques. Il est très polyvalent, extensible et axé sur la communauté.CoûtL’utilisation de R est gratuite ! Il existe une forte éthique dans la\ncommunauté du matériel gratuit et open-source.ReproductibilitéLa gestion et l’analyse de vos données par le biais d’un langage de\nprogrammation (par rapport à Excel ou à un autre outil essentiellement\nmanuel) améliore la reproductibilité, facilite la détection des erreurs\net allège votre charge de travail.CommunautéLa communauté des utilisateurs de R est énorme et collaborative. De\nnouveaux paquets et outils destinés à résoudre des problèmes concrets\nsont développés quotidiennement et approuvés par la communauté des\nutilisateurs. À titre d’exemple, R-Ladies est\nune organisation mondiale dont la mission est de promouvoir la diversité\ndes genres dans la communauté R, et c’est l’une des plus grandes\norganisations d’utilisateurs de R. Elle probablement un chapitre près\nde chez vous !","code":""},{"path":"rbasics.html","id":"termes-clés","chapter":"1 R - les bases","heading":"1.2 Termes clés","text":"RStudio - RStudio est une interface utilisateur graphique (GUI) qui\nfacilite l’utilisation de R. Pour en savoir plus, consultez la\nsection RStudio.Objets - Tout ce que vous stockez dans R - les jeu de données, les\nvariables, une liste de noms de villages, un population total\nd’habitants, et même les résultats tels que les graphiques - sont des\nobjets auxquels attribue un nom et qui peuvent être référencés\ndans des commandes ultérieures. Pour en savoir plus, consultez la\nsection Objets.Fonctions - Une fonction est une opération de code qui accepte des\nentrées et renvoie une sortie transformée. Pour en savoir plus,\nconsultez la section Fonctions.Paquets - Un paquet R est un ensemble de fonctions partageables.\nPour en savoir plus, consultez la section Packages.Scripts - Un script est le fichier document qui contient vos\ncommandes. Pour en savoir plus, consultez la section Scripts","code":""},{"path":"rbasics.html","id":"learning","chapter":"1 R - les bases","heading":"1.3 Ressources pour l’apprentissage","text":"","code":""},{"path":"rbasics.html","id":"ressources-au-sein-de-rstudio","chapter":"1 R - les bases","heading":"Ressources au sein de RStudio","text":"Documentation d’aideRecherchez dans l’onglet “Aide” de RStudio la documentation sur les\npaquets R et les fonctions spécifiques. Cet onglet se trouve dans le\nvolet qui contient également les fichiers, les graphiques et les paquets\n(généralement dans le volet inférieur à droit). Comme raccourci, vous\npouvez également taper le nom d’un paquet ou d’une fonction dans la\nconsole R après un point d’interrogation pour ouvrir la page d’aide\ncorrespondante. N’incluez pas les parenthèses.Par exemple : ?filter ou ?diagrammeR.Tutoriels interactifsIl existe plusieurs façons d’apprendre R de manière interactive dans\nRStudio.RStudio lui-même offre un volet Tutoriel qui est alimenté par le paquet\nR\nlearnr.\nIl suffit d’installer ce paquet et d’ouvrir un tutoriel via le nouvel\nonglet “Tutorial” dans le volet supérieur droit de RStudio (qui contient\négalement les onglets Environnement et Historique).Le paquet R swirl propose des cours\ninteractifs dans la console R. Installez et chargez ce paquet, puis\nlancez la commande swirl() (parenthèses vides) dans la console R. Vous\nverrez apparaître des invites dans la console. Répondez en tapant dans\nla console. Elle vous guidera à travers un cours de votre choix.","code":""},{"path":"rbasics.html","id":"fiches-daide-mémoire","chapter":"1 R - les bases","heading":"Fiches d’aide-mémoire","text":"Il existe de nombreuses fiches d’aide-mémoire au format PDF disponibles\nsur le site Web de\nRStudio, par exemple :Facteurs avec le paquet forcatsDates et heures avec le paquet lubridateChaînes de caractères avec le paquet stringrOpérations itératives avec le paquet purrrImportation de donnéesAide-mémoire pour la transformation des données avec le paquet\ndplyrR Markdown (pour créer des documents comme PDF, Word,\nPowerpoint…)Shiny (pour créer des applications Web interactives)Visualisation de données avec le paquet ggplot2Cartographie (SIG)Paquet leaflet (cartes interactives)Python avec R (paquet reticulate)Il existe également une ressource R en ligne spécialement destinée aux\nutilisateurs d’Excel.","code":""},{"path":"rbasics.html","id":"twitter","chapter":"1 R - les bases","heading":"Twitter","text":"R possède une communauté Twitter dynamique où vous pouvez apprendre des\nastuces, des raccourcis et des nouvelles - suivez ces comptes :Suivez-nous ! @epiRhandbookR Function Day @rfuntionaday\nest une ressource incroyableR pour la science des données\n@rstats4dsRStudio @RStudioConseils sur RStudio\n@rstudiotipsR-Bloggers @RbloggersR-ladies @RLadiesGlobalHadley Wickham\n@hadleywickhamAussi :#epitwitter et #rstats","code":""},{"path":"rbasics.html","id":"ressources-gratuites-en-ligne","chapter":"1 R - les bases","heading":"Ressources gratuites en ligne","text":"Un texte définitif est le livre R Data\nScience de Garrett Grolemund et Hadley\nWickham.Le site Web du projet R4Epis vise à\n“développer des outils standardisés de nettoyage, d’analyse et de\nrapport des données pour couvrir les types courants d’épidémies et\nd’enquêtes auprès de la population qui seraient menées dans le cadre\nd’une réponse d’urgence de MSF”. Vous y trouverez des supports de\nformation aux bases de R, des modèles de rapports RMarkdown sur les\népidémies et les enquêtes, ainsi que des tutoriels pour vous aider à les\nconfigurer.","code":""},{"path":"rbasics.html","id":"langues-autres-que-langlais","chapter":"1 R - les bases","heading":"Langues autres que l’anglais","text":"Materiales de RStudio en\nEspañolIntroduction à R et au tidyverse\n(Francais)","code":""},{"path":"rbasics.html","id":"installation","chapter":"1 R - les bases","heading":"1.4 Installation","text":"","code":""},{"path":"rbasics.html","id":"r-et-rstudio","chapter":"1 R - les bases","heading":"R et RStudio","text":"Comment installer RVisitez ce site Web https://www.r-project.org/ et téléchargez la\ndernière version de R adaptée à votre ordinateur.Comment installer RStudioVisitez ce site Web https://rstudio.com/products/rstudio/download/ et\ntéléchargez la dernière version de bureau gratuite de RStudio adaptée à\nvotre ordinateur.Autorisations requisesNotez que vous devez installer R et RStudio sur un lecteur sur lequel\nvous avez des droits de lecture et d’écriture. Sinon, votre capacité à\ninstaller des paquets R (ce qui arrive fréquemment) sera affectée. Si\nvous rencontrez des problèmes, essayez d’ouvrir RStudio en faisant un\nclic droit sur l’icône et en sélectionnant “Exécuter en tant\nqu’administrateur”. Vous trouverez d’autres conseils sur la page R sur\nles lecteurs réseau.Comment mettre à jour R et RStudioVotre version de R est imprimée dans la Console R au démarrage. Vous\npouvez également exécuter sessionInfo().Pour mettre à jour R, allez sur le site web mentionné ci-dessus et\nréinstallez R. Alternativement, vous pouvez utiliser le paquet\ninstallr (sous Windows) en exécutant installr::updateR(). Cela\nouvrira des boîtes de dialogue pour vous aider à télécharger la dernière\nversion de R et à mettre à jour vos paquets vers la nouvelle version de\nR. Plus de détails peuvent être trouvés dans la documentation de\ninstallr.Sachez que l’ancienne version de R existera toujours sur votre\nordinateur. Vous pouvez temporairement exécuter une ancienne version\n(ancienne “installation”) de R en cliquant sur “Outils” -> “Options\nglobales” dans RStudio et en choisissant une version de R. Cela peut\nêtre utile si vous voulez utiliser un paquet qui n’pas été mis à jour\npour fonctionner sur la version la plus récente de R.Pour mettre à jour RStudio, vous pouvez aller sur le site Web ci-dessus\net retélécharger RStudio. Une autre option consiste à cliquer sur “Aide”\n-> “Vérifier les mises à jour” dans RStudio, mais cela peut ne pas\nmontrer les toutes dernières mises à jour.Pour savoir quelles versions de R, RStudio ou des paquets ont été\nutilisées lors de la réalisation de ce manuel, consultez la page sur\nNotes techniques et choix éditoriaux.","code":""},{"path":"rbasics.html","id":"autres-logiciels-que-vous-pourriez-avoir-besoin-dinstaller","chapter":"1 R - les bases","heading":"Autres logiciels que vous pourriez avoir besoin d’installer","text":"TinyTeX (pour la compilation d’un document RMarkdown au format\nPDF)Pandoc (pour compiler des documents RMarkdown)RTools (pour construire des paquets pour R)phantomjs (pour enregistrer des images fixes de réseaux animés,\ntels que des chaînes de transmission)","code":""},{"path":"rbasics.html","id":"tinytex","chapter":"1 R - les bases","heading":"TinyTex","text":"TinyTex est une distribution LaTeX personnalisée, utile lorsqu’essaie\nde produire des PDF à partir de R.\nVoir https://yihui.org/tinytex/ pour plus d’informations.Pour installer TinyTex à partir de R :","code":"\ninstall.packages('tinytex')\ntinytex::install_tinytex()\n\n# pour désinstaller TinyTeX, lancez tinytex::uninstall_tinytex()"},{"path":"rbasics.html","id":"pandoc","chapter":"1 R - les bases","heading":"Pandoc","text":"Pandoc est un convertisseur de document, un logiciel séparé de R. Il\nest fourni avec RStudio et ne devrait pas avoir besoin d’être\ntéléchargé. Il aide le processus de conversion de documents Rmarkdown\nà des formats comme .pdf et ajoute des fonctionnalités complexes.","code":""},{"path":"rbasics.html","id":"rtools","chapter":"1 R - les bases","heading":"RTools","text":"RTools est une collection de logiciels permettant de construire des\npaquets pour R.Installer à partir de ce site web :\nhttps://cran.r-project.org/bin/windows/Rtools/","code":""},{"path":"rbasics.html","id":"phantomjs","chapter":"1 R - les bases","heading":"phantomjs","text":"Cet outil est souvent utilisé pour faire des “captures d’écran” des\npages web. Par exemple, lorsque vous faites une chaîne de transmission\navec le paquet epicontacts, un fichier HTML interactif et dynamique\nest produit. Si vous voulez une image statique, il peut être utile\nd’utiliser le paquet\nwebshot pour\nautomatiser ce processus. Cela nécessite le programme externe\n“phantomjs”. Vous pouvez installer phantomjs via le paquet webshot\navec la commande webshot::install_phantomjs().","code":""},{"path":"rbasics.html","id":"rstudio","chapter":"1 R - les bases","heading":"1.4.1 RStudio","text":"","code":""},{"path":"rbasics.html","id":"orientation-de-rstudio","chapter":"1 R - les bases","heading":"Orientation de RStudio","text":"D’abord, ouvrez RStudio. Comme leurs icônes peuvent être très\nsimilaires, assurez-vous que vous ouvrez bien RStudio et non pas R.Pour que RStudio fonctionne, vous devez également avoir R installé sur\nl’ordinateur (voir ci-dessus pour les instructions d’installation).RStudio est une interface (GUI) pour une utilisation plus facile de\nR. Vous pouvez considérer R comme le moteur d’un véhicule, qui\neffectue le travail crucial, et RStudio comme le corps du véhicule (avec\nles sièges, les accessoires, etc.) qui vous aide à utiliser le moteur\npour avancer ! Vous pouvez consulter la fiche technique complète de\nl’interface utilisateur de RStudio (PDF)\niciPar défaut, RStudio affiche quatre volets rectangulaires.TIP: Si votre RStudio n’affiche qu’un seul volet gauche, c’est\nparce que vous n’avez pas encore de scripts\nouverts.Le volet sourceCe volet, par défaut en haut à gauche, est un espace pour éditer,\nexécuter et enregistrer vos scripts. Les scripts contiennent\nles commandes que vous souhaitez exécuter. Ce volet peut également\nafficher des ensembles de données (cadres de données) pour les\nvisualiser.Pour les utilisateurs de Stata, ce volet est similaire aux fenêtres\n-file et Data Editor.Le volet Console RLa console R, qui est par défaut le volet gauche ou inférieur gauche de\nR Studio, est le siège du “moteur” R. C’est là que les commandes sont\nréellement exécutées et que les sorties non graphiques et les messages\nd’erreur/d’avertissement apparaissent. Vous pouvez saisir et exécuter\ndirectement des commandes dans la console R, mais sachez que ces\ncommandes ne sont pas enregistrées comme c’est le cas lorsque vous\nexécutez des commandes à partir d’un script.Si vous êtes familier avec Stata, la console R ressemble à la fenêtre de\ncommande et à la fenêtre des résultats.Le volet EnvironnementCe volet, situé par défaut en haut à droite, est le plus souvent utilisé\npour afficher de brefs résumés des objets de l’environnement\nR dans la session en cours. Ces objets peuvent inclure des ensembles de\ndonnées importés, modifiés ou créés, des paramètres que vous avez\ndéfinis (par exemple, une semaine épi spécifique pour l’analyse), ou des\nvecteurs ou des listes que vous avez définis pendant l’analyse (par\nexemple, les noms des régions). Vous pouvez cliquer sur la flèche à côté\ndu nom d’un cadre de données pour voir ses variables.Dans Stata, cette fenêtre est très similaire à celle du gestionnaire de\nvariables.Ce volet contient également l’onglet “Historique” où vous pouvez voir\nles commandes que vous avez exécutées précédemment. Il comporte\négalement un onglet “Tutoriel” où vous pouvez suivre des tutoriels R\ninteractifs si vous avez installé le paquet learnr. En outre, il\nexiste un volet “Connexions” pour les connexions aux bases de données\nexternes. Si vous avez lié le répertoire actif à un dépôt sur Github, il\ny aura également un volet “Git”.Volets Graphiques, visionneuse, paquets et aideLe volet inférieur droit comprend plusieurs onglets importants. Les\ngraphiques de tracé typiques, y compris les cartes, s’affichent dans le\nvolet Tracé. Les sorties interactives ou HTML s’affichent dans le volet\nVisionneuse. Le volet Aide permet d’afficher la documentation et les\nfichiers d’aide. Le volet Fichiers est un navigateur qui peut être\nutilisé pour ouvrir ou supprimer des fichiers. Le volet Paquets vous\npermet de voir, d’installer, de mettre à jour, de supprimer, de\ncharger/décharger des paquets R et de voir quelle version du paquet vous\navez. Pour en savoir plus sur les paquets, consultez la section\npaquets ci-dessous.Ce volet contient les équivalents Stata des fenêtres Plots Manager et\nProject Manager.","code":""},{"path":"rbasics.html","id":"paramètres-rstudio","chapter":"1 R - les bases","heading":"Paramètres RStudio","text":"Modifiez les paramètres et l’apparence de RStudio dans le menu déroulant\nOutiles, en sélectionnant Options globales. Vous pouvez y modifier\nles paramètres par défaut, y compris l’apparence/couleur de fond.RedémarrageSi votre R se fige, vous pouvez redémarrer R en allant dans le menu\nSession et en cliquant sur “Redémarrer R”. Cela vous évite de devoir\nfermer et ouvrir RStudio. Tout ce qui se trouve dans votre environnement\nR sera supprimé lorsque vous ferez cela.","code":""},{"path":"rbasics.html","id":"raccourcis-clavier","chapter":"1 R - les bases","heading":"Raccourcis clavier","text":"Vous trouverez ci-dessous quelques raccourcis clavier très utiles. Vous\ntrouverez tous les raccourcis clavier pour Windows, Max et Linux sur la\ndeuxième page de ce fichier\ntechnique\npar RStudio.TIP: Utilisez votre touche de tabulation lorsque vous tapez pour\nactiver la fonctionnalité de complétion automatique de RStudio. Cela\npeut éviter les fautes d’orthographe. Appuyez sur la touche Tab pendant\nla saisie pour produire un menu déroulant de fonctions et d’objets\nprobables, en fonction de ce que vous avez tapé jusqu’à\nprésent.","code":""},{"path":"rbasics.html","id":"functions","chapter":"1 R - les bases","heading":"1.5 Fonctions","text":"Les fonctions sont au cœur de l’utilisation de R. Les fonctions vous\npermettent d’effectuer des tâches et des opérations. De nombreuses\nfonctions sont installées avec R, beaucoup d’autres sont disponibles à\ntélécharger dans des paquets (expliqués dans la section\npaquets), et vous pouvez même écrire vos propres fonctions\npersonnalisées !Cette section de base sur les fonctions explique :Ce qu’est une fonction et comment elle fonctionneCe que sont les paramètres des fonctionsComment obtenir de l’aide pour comprendre une fonctionUne note rapide sur la syntaxe : Dans ce manuel, les fonctions sont\nécrites en code-texte avec des parenthèses vides, comme ceci :\nfilter(). Comme expliqué dans la section paquets, les\nfonctions sont téléchargées dans des paquets. Dans ce manuel, les noms\nde paquets sont écrits en gras, comme dplyr. Parfois, dans le\ncode d’exemple, vous pouvez voir le nom de la fonction lié explicitement\nau nom de son paquet avec deux points de suspension (::) comme ceci :\ndplyr::filter(). Le de ce lien est expliqué dans la section sur\nles paquets.","code":""},{"path":"rbasics.html","id":"fonctions-simples","chapter":"1 R - les bases","heading":"Fonctions simples","text":"Une fonction est comme une machine qui reçoit des entrées, effectue\nune action avec ces entrées, et produit une sortie. La nature de la\nsortie dépend de la fonction.Les fonctions opèrent généralement sur un objet placé entre les\nparenthèses de la fonction. Par exemple, la fonction sqrt() calcule\nla racine carrée d’un nombre :L’objet fourni à une fonction peut également être une colonne dans un\njeu de données (voir la section Objets pour plus de détails\nsur tous les types d’objets). Comme R peut stocker plusieurs jeux de\ndonnées, vous devrez spécifier à la fois le jeu de données et la\ncolonne. Une façon de le faire est d’utiliser la notation $ pour lier\nle nom du jeu de données et le nom de la colonne (dataset$column).\nDans l’exemple ci-dessous, la fonction summary() est appliquée à la\ncolonne numérique age du jeu de données linelist, et la sortie est\nun résumé des valeurs numériques et manquantes de la colonne.NOTE: En coulisses, une fonction représente un code\nsupplémentaire complexe qui été regroupé pour l’utilisateur dans une\nseule commande simple.","code":"\nsqrt(49)## [1] 7\n# Imprimez les statistiques sommaires de la colonne 'age' dans le jeu de données 'linelist'.\nsummary(linelist$age)##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n##    0.00    6.00   13.00   16.07   23.00   84.00      86"},{"path":"rbasics.html","id":"fonctions-à-paramètres-multiples","chapter":"1 R - les bases","heading":"Fonctions à paramètres multiples","text":"Les fonctions demandent souvent plusieurs entrées, appelées\nparamètres, situées entre les parenthèses de la fonction,\ngénéralement séparées par des virgules.Certains paramètres sont obligatoires pour que la fonction\nfonctionne correctement, d’autres sont facultatifsLes paramètres facultatifs ont des valeurs par défautLes paramètres peuvent prendre des entrées de type caractère,\nnumérique, logique (VRAI/FAUX) et autres.Voici une fonction fictive amusante, appelée oven_bake() (cuisson au\nfour), comme exemple d’une fonction typique. Elle prend un objet comme\nentrée (par exemple un jeu de données, ou dans cet exemple “pâte”) et\neffectue des opérations sur celui-ci comme spécifié par des paramètres\nsupplémentaires (minutes = et température =). La sortie peut être\nimprimée sur la console, ou sauvegardée comme un objet en utilisant\nl’opérateur d’affectation <-.Dans un exemple plus réaliste, la commande age_pyramid()\nci-dessous produit un graphique de pyramide des âges basé sur des\ngroupes d’âge définis et une colonne de division binaire, comme le genre\ngender. La fonction reçoit trois paramètres entre parenthèses, séparés\npar des virgules. Les valeurs fournies aux paramètres établissent\nlinelist comme le cadre de données à utiliser, age_cat5 comme la\ncolonne à compter, et gender comme la colonne binaire à utiliser pour\ndiviser la pyramide par couleur.La commande ci-dessus peut être écrite de manière équivalente comme\nci-dessous, dans un style plus long avec une nouvelle ligne pour chaque\nargument. Ce style peut être plus facile à lire, et plus facile d’écrire\ndes “commentaires” avec # pour expliquer chaque partie (commenter\nabondamment est une bonne pratique !). Pour exécuter cette commande plus\nlongue, vous pouvez souligner la commande entière et cliquer sur “Run”,\nou simplement placer votre curseur sur la première ligne et appuyer\nsimultanément sur les touches Ctrl et Enter.La première moitié d’une affectation de paramètre (par exemple data =)\nn’pas besoin d’être spécifiée si les paramètres sont écrits dans un\nordre spécifique (spécifié dans la documentation de la fonction). Le\ncode ci-dessous produit exactement la même pyramide que ci-dessus, parce\nque la fonction attend l’ordre des paramètres : cadre de données, le\nvariable age_group, puis le variable split_by.Une commande age_pyramid() plus complexe pourrait inclure les\nparamètres optionnels pour :Afficher les proportions au lieu des nombres (définissez\nproportional = TRUE (vrai) quand la valeur par défaut est FALSE\n(faux))`Spécifier les deux couleurs à utiliser (pal = est l’abréviation de\n“palette” et est fourni avec un vecteur de deux noms de couleurs.\nVoir la page objets pour savoir comment la\nfonction c() fabrique un vecteur).NOTE: Pour les paramètres que vous spécifiez avec les deux\nparties du paramètre (par exemple proportional = TRUE), leur ordre\nparmi tous les paramètres n’pas d’importance.","code":"\n# Créer une pyramide des âges\nage_pyramid(data = linelist, age_group = \"age_cat5\", split_by = \"gender\")\n# Créer une pyramide des âges\nage_pyramid(\n  data = linelist,        # utiliser la liste linéaire des cas\n  age_group = \"age_cat5\", # fournir une colonne de groupe d'âge\n  split_by = \"gender\"     # utiliser la colonne genre pour les deux côtés de la pyramide\n  )\n# Cette commande produira exactement le même graphique que ci-dessus\nage_pyramid(linelist, \"age_cat5\", \"gender\")\nage_pyramid(\n  linelist,                    # utiliser la liste linéaire des cas\n  \"age_cat5\",                  # colonne de groupe d'âge\n  \"gender\",                    # répartition par genre\n  proportional = TRUE,         # pourcentage au lieu du nombre\n  pal = c(\"orange\", \"purple\")  # couleurs\n  )"},{"path":"rbasics.html","id":"ecrire-des-fonctions","chapter":"1 R - les bases","heading":"Ecrire des fonctions","text":"R est un langage orienté autour des fonctions, vous devez donc vous\nsentir capable d’écrire vos propres fonctions. La création de fonctions\nprésente plusieurs avantages :Faciliter la programmation modulaire - la séparation du code en\nmorceaux indépendants et gérablesRemplacer le copier-coller répétitif, qui peut être source\nd’erreursDonner des noms mémorisables aux morceaux de codeL’écriture d’une fonction est traitée en détail à la page Écriture de\nfonctions.","code":""},{"path":"rbasics.html","id":"packages","chapter":"1 R - les bases","heading":"1.6 Paquets","text":"Les paquets contiennent des fonctions.Un paquet en R est un ensemble partageable de code et de documentation\nqui contient des fonctions prédéfinies. Les utilisateurs de la\ncommunauté R développent en permanence des packages répondant à des\nproblèmes spécifiques; donc il est probable que l’un d’entre eux puisse\nvous aider dans votre travail ! Vous allez installer et utiliser des\ncentaines de paquets dans votre utilisation de R.À l’installation, R contient des paquets et des fonctions “de base”\nqui effectuent des tâches élémentaires communes. Mais de nombreux\nutilisateurs de R créent des fonctions spécialisées, qui sont vérifiées\npar la communauté R et que vous pouvez télécharger en tant que\npaquet pour votre propre usage. Dans ce manuel, les noms des paquets\nsont écrits en gras. L’un des aspects les plus difficiles de R est\nqu’il existe souvent de nombreuses fonctions ou paquets parmi lesquels\npeut choisir pour effectuer une tâche donnée.","code":""},{"path":"rbasics.html","id":"installer-et-charger","chapter":"1 R - les bases","heading":"Installer et charger","text":"Les fonctions sont contenues dans des paquets qui peuvent être\ntéléchargés (“installés”) sur votre ordinateur à partir d’Internet. Une\nfois qu’un paquet est téléchargé, il est stocké dans votre\n“bibliothèque”. Vous pouvez alors accéder aux fonctions qu’il contient\npendant votre séance R actuelle en “chargeant” le paquet.Pensez à R comme votre bibliothèque personnelle : Lorsque vous\ntéléchargez un paquet, votre bibliothèque gagne un nouveau livre de\nfonctions, mais chaque fois que vous voulez utiliser une fonction de ce\nlivre, vous devez emprunter (“charger”) ce livre dans votre\nbibliothèque.En résumé : pour utiliser les fonctions disponibles dans un paquet R,\ndeux étapes doivent être mises en œuvre :Le paquet doit être installé (une fois), etLe paquet doit être chargé (à chaque séance R)","code":""},{"path":"rbasics.html","id":"votre-bibliothèque","chapter":"1 R - les bases","heading":"Votre bibliothèque","text":"Votre “bibliothèque” est en fait un dossier sur votre ordinateur,\ncontenant un dossier pour chaque paquet qui été installé. Déterminez\noù R est installé sur votre ordinateur, et cherchez un dossier appelé\n“win-library”. Par exemple : R\\win-library\\4.0 (4.0 est la version de\nR). Notez que vous aurez une bibliothèque différente pour chaque version\nde R que vous avez téléchargée.Vous pouvez imprimer le chemin d’accès à votre bibliothèque en entrant\n.libPaths() (parenthèses vides). Ceci devient particulièrement\nimportant si vous travaillez avec R sur des lecteurs\nréseau.","code":""},{"path":"rbasics.html","id":"installer-à-partir-du-cran","chapter":"1 R - les bases","heading":"Installer à partir du CRAN","text":"Le plus souvent, les utilisateurs de R téléchargent des paquets depuis\nCRAN. CRAN (Comprehensive R Archive Network) est un entrepôt public en\nligne de paquets R qui ont été publiés par des membres de la communauté\nR.Vous vous inquiétez des virus et de la sécurité lorsque vous téléchargez\nun paquet depuis CRAN ? Lisez cet\narticle\nà ce sujet.","code":""},{"path":"rbasics.html","id":"comment-installer-et-charger","chapter":"1 R - les bases","heading":"Comment installer et charger","text":"Dans ce manuel, nous suggérons d’utiliser le paquet pacman\n(abréviation de “package manager” en anglais). Il offre une fonction\npratique p_load() qui installera un paquet si nécessaire et le\nchargera pour l’utiliser dans la séance R actuelle.La syntaxe est assez simple. Il suffit de lister les noms des paquets\nentre les parenthèses de p_load(), séparés par des virgules.La commande ci-dessous installera les paquets rio, tidyverse, et\ns’ils ne sont pas encore installés, et les chargera pour les\nutiliser. Cela rend l’approche p_load() pratique et concise si vous\npartagez des scripts avec d’autres personnes. Notez que les noms des\npaquets sont sensibles à la casse.Notez que nous avons utilisé la syntaxe pacman::p_load() qui écrit\nexplicitement le nom du paquet (pacman) avant le nom de la fonction\n(p_load()), reliés par deux deux points ::. Cette syntaxe est utile\ncar elle charge également le paquet pacman (en supposant qu’il soit\ndéjà installé).Il existe d’autres fonctions R de base que vous verrez souvent. La\nfonction R de base pour installer un paquet est\ninstall.packages(). Le nom du paquet à installer doit être fourni\nentre les parenthèses et entre guillemets. Si vous voulez installer\nplusieurs paquets en une seule commande, ils doivent être listés dans un\nvecteur de caractères c().Remarque : cette commande installe un paquet, mais ne le charge pas\npour l’utiliser dans la séance en cours.L’installation peut également être effectuée par pointer-cliquer en\nallant dans le panneau “Packages” de RStudio, en cliquant sur\n“Installer” et en recherchant le nom du paquet souhaité.La fonction base de R pour charger un paquet à utiliser (après\nqu’il ait été installé) est library(). Elle ne peut charger qu’un seul\npaquet à la fois (une autre raison d’utiliser p_load()). Vous pouvez\nfournir le nom du paquet avec ou sans guillemets.Pour vérifier si un paquet est installé et/ou chargé, vous pouvez\nafficher le panneau des paquets dans RStudio. Si le paquet est installé,\nil est affiché avec son numéro de version. Si sa case est cochée, il est\nchargé pour la séance en cours.Installation depuis GithubParfois, vous avez besoin d’installer un paquet qui n’est pas encore\ndisponible sur CRAN. Ou peut-être que le paquet est disponible sur CRAN\nmais que vous voulez la version de développement avec de nouvelles\nfonctionnalités qui ne sont pas encore proposées dans la version CRAN\npubliée, plus stable. Ces versions sont souvent hébergées sur le site\nWeb github.com dans un “dépôt” de code libre et\npublic. Pour en savoir plus sur Github, consultez la page du manuel\nintitulée Version control et collaboration avec\nGitHub.Pour télécharger des paquets R depuis Github, vous pouvez utiliser la\nfonction p_load_gh() de pacman, qui installera le paquet si\nnécessaire, et le chargera pour l’utiliser dans votre séance R actuelle.\nLes alternatives à l’installation incluent l’utilisation des paquets\nremotes ou devtools. Pour en savoir plus sur toutes les\nfonctions de pacman, consultez la documentation du\npaquet.Pour installer à partir de Github, vous devez fournir plus\nd’informations. Vous devez fournir :L’ID Github (nom d’utilisateur) du propriétaire du dépôt.Le nom du dépôt qui contient le paquet.(facultatif) Le nom de la “branche” (version de développement\nspécifique) que vous souhaitez télécharger.Dans les exemples ci-dessous, le premier mot entre guillemets est l’ID\nGithub du propriétaire du dépôt. Après la barre oblique est le nom du\ndépôt (typiquement le nom du paquet).Si vous voulez installer à partir d’une “branche” (version) autre que la\nbranche principale, ajoutez le nom de la branche après un “@”, après le\nnom du dépôt.S’il n’y pas de différence entre la version Github et la version sur\nvotre ordinateur, aucune action ne sera entreprise. Vous pouvez “forcer”\nune réinstallation en utilisant p_load_current_gh() avec le paramètre\nupdate = TRUE. Lisez plus sur pacman dans cette vignette en\nligneInstallation à partir d’un ZIP ou d’un TARVous pouvez installer le paquet à partir d’une URL :Ou bien, le télécharger sur votre ordinateur dans un fichier zippé :Option 1 : utiliser install_local() du paquet remotes.Option 2 : en utilisant install.packages() du R de base, en\nfournissant le chemin d’accès au fichier ZIP et en définissant\ntype = \"source\" et repos = NULL.","code":"\n# Installer (si nécessaire) et charger les paquets pour l'utilisation\npacman::p_load(rio, tidyverse, here)\n# Installer un seul paquet avec la base R\ninstall.packages(\"tidyverse\")\n\n# Installer plusieurs paquets avec la base R\ninstall.packages(c(\"tidyverse\", \"rio\", \"here\"))\n# Charger des paquets à utiliser, avec la base R\nlibrary(tidyverse)\nlibrary(rio)\nlibrary(here)\n# Installer/charger le paquet epicontacts depuis son dépôt Github\np_load_gh(\"reconhub/epicontacts\")\n# Installer la branche \"timeline\" du paquet epicontacts depuis Github\np_load_gh(\"reconhub/epicontacts@timeline\")\npackageurl <- \"https://cran.r-project.org/src/contrib/Archive/dsr/dsr_0.2.2.tar.gz\"\ninstall.packages(packageurl, repos = NULL, type = \"source\")\nremotes::install_local(\"~/Downloads/dplyr-master.zip\")\ninstall.packages(\"~/Downloads/dplyr-master.zip\", \n                 type = \"source\", \n                 repos = NULL)"},{"path":"rbasics.html","id":"syntaxe-du-code","chapter":"1 R - les bases","heading":"Syntaxe du code","text":"Pour plus de clarté dans ce manuel, les fonctions sont parfois précédées\ndu nom de leur paquet en utilisant le symbole :: de la manière\nsuivante : nom_du_paquet::nom_de_la_fonction().Une fois qu’un paquet est chargé pour une séance, ce style explicite\nn’est plus nécessaire. peut simplement utiliser\nnom_de_la_fonction(). Cependant, écrire le nom du paquet est utile\nlorsqu’un nom de fonction est commun et peut exister dans plusieurs\npaquets (par exemple, plot()). L’écriture du nom du paquet chargera\négalement le paquet s’il n’est pas déjà chargé.","code":"\n# Cette commande utilise le paquet \"rio\" et sa fonction \"import()\" pour importer un jeu de données\nlinelist <- rio::import(\"linelist.xlsx\", which = \"Sheet1\")"},{"path":"rbasics.html","id":"aide-sur-les-fonctions","chapter":"1 R - les bases","heading":"Aide sur les fonctions","text":"Pour en savoir plus sur une fonction, vous pouvez la rechercher dans\nl’onglet Aide du RStudio en bas à droite. Vous pouvez également lancer\nune commande comme ?thefunctionname (mettez le nom de la fonction\naprès un point d’interrogation) et la page d’aide apparaîtra dans le\nvolet d’aide. Enfin, essayez de rechercher des ressources en ligne.","code":""},{"path":"rbasics.html","id":"mettre-à-jour-les-paquets","chapter":"1 R - les bases","heading":"Mettre à jour les paquets","text":"Vous pouvez mettre à jour les paquets en les réinstallant. Vous pouvez\négalement cliquer sur le bouton vert “Update” dans votre panneau\n“RStudio Packages” pour voir quels paquets ont de nouvelles versions à\ninstaller. Sachez que votre ancien code peut avoir besoin d’être mis à\njour s’il y une révision majeure du fonctionnement d’une fonction !","code":""},{"path":"rbasics.html","id":"supprimer-des-paquets","chapter":"1 R - les bases","heading":"Supprimer des paquets","text":"Utilisez p_delete() de pacman, ou remove.packages() de base\nR. Alternativement, allez chercher le dossier qui contient votre\nbibliothèque et supprimez manuellement le dossier.","code":""},{"path":"rbasics.html","id":"dépendances","chapter":"1 R - les bases","heading":"Dépendances","text":"Les paquets dépendent souvent d’autres paquets pour fonctionner. Ceux-ci\nsont appelés dépendances. Si une dépendance ne s’installe pas, le paquet\nqui en dépend peut également ne pas s’installer.Voir les dépendances d’un paquet avec p_depends(), et voir quels\npaquets en dépendent avec p_depends_reverse().","code":""},{"path":"rbasics.html","id":"fonctions-masquées","chapter":"1 R - les bases","heading":"Fonctions masquées","text":"Il n’est pas rare que deux paquets ou plus contiennent le même nom de\nfonction. Par exemple, le paquet dplyr possède une fonction\nfilter(), mais le paquet stats aussi. La fonction filter() par\ndéfaut dépend de l’ordre dans lequel ces paquets sont chargés pour la\npremière fois dans la séance R - le dernier sera la fonction par défaut\nde la commande filter().Vous pouvez vérifier l’ordre dans votre panneau Environnement de R\nStudio - cliquez sur la liste déroulante pour “Global Environment” et\nvoyez l’ordre des paquets. Les fonctions des paquets inférieurs dans\ncette liste déroulante masqueront les fonctions du même nom dans les\npaquets qui apparaissent plus haut dans la liste déroulante. Lors du\npremier chargement d’un paquet, R vous avertira dans la console si le\nmasquage se produit, mais il est facile de ne pas le voir.Voici comment vous pouvez corriger le masquage :Spécifiez le nom du paquet dans la commande. Par exemple, utilisez\ndplyr::filter()Réorganisez l’ordre dans lequel les paquets sont chargés (par\nexemple, dans p_load()), et démarrez une nouvelle séance R.","code":""},{"path":"rbasics.html","id":"détacher-décharger","chapter":"1 R - les bases","heading":"Détacher / décharger","text":"Pour détacher (décharger) un paquet, utilisez cette commande, avec le\nnom correct du paquet et un seul deux-points. Notez que cela peut ne pas\nrésoudre le masquage.","code":"\ndetach(package:NOM_DU_PAQUET_ICI, unload = TRUE)"},{"path":"rbasics.html","id":"installer-une-ancienne-version","chapter":"1 R - les bases","heading":"Installer une ancienne version","text":"Consultez ce\nguide\npour installer une ancienne version d’un paquet particulier.","code":""},{"path":"rbasics.html","id":"paquets-suggérés","chapter":"1 R - les bases","heading":"Paquets suggérés","text":"Voir la page Paquets suggérés pour une liste de\npaquets que nous recommandons pour l’épidémiologie quotidienne.","code":""},{"path":"rbasics.html","id":"scripts","chapter":"1 R - les bases","heading":"1.7 Scripts","text":"Les scripts sont une partie fondamentale de la programmation. Ce sont\ndes documents qui contiennent vos commandes (par exemple, des fonctions\npour créer et modifier des jeux de données, imprimer des visualisations,\netc). Vous pouvez sauvegarder un script et l’exécuter à nouveau\nultérieurement. Le stockage et l’exécution de vos commandes à partir\nd’un script présentent de nombreux avantages (par rapport à la saisie\ndes commandes une par une dans la “ligne de commande” de la console R) :Portabilité : vous pouvez partager votre travail avec d’autres\npersonnes en leur envoyant vos scriptsReproductibilité : pour que vous et les autres sachiez exactement ce\nque vous avez faitContrôle de version : pour que vous puissiez suivre les\nmodifications apportées par vous-même ou par vos collèguesCommentaire/annotation : pour expliquer à vos collègues ce que vous\navez fait","code":""},{"path":"rbasics.html","id":"commentaire","chapter":"1 R - les bases","heading":"Commentaire","text":"Dans un script, vous pouvez également annoter (“commenter”) votre code\nR. Les commentaires sont utiles pour expliquer à vous-même et aux autres\nlecteurs ce que vous faites. Vous pouvez ajouter un commentaire en\ntapant le symbole dièse (#) et en écrivant votre commentaire après. Le\ntexte commenté apparaîtra dans une couleur différente de celle du code\nR.Tout code écrit après le # ne sera pas exécuté. Par conséquent, placer\nun # avant le code est également un moyen utile de bloquer\ntemporairement une ligne de code (“commenter”) si vous ne souhaitez pas\nla supprimer). Vous pouvez mettre en commentaire plusieurs lignes à la\nfois en les soulignant et en appuyant sur Ctrl+Shift+c (Cmd+Shift+c sur\nMac).Vous trouverez ci-dessous quelques conseils essentiels pour commenter et\nannoter votre code :Commentez ce que vous faites et pourquoi vous le faitesDécoupez votre code en sections logiquesAccompagnez votre code d’une description textuelle étape par étape\nde ce que vous faites (par exemple, des étapes numérotées).","code":"\n# Un commentaire peut être sur une ligne par lui-même, ex.:\n# Importer des données:\nlinelist <- import(\"linelist_raw.xlsx\") %>% # un commentaire peut aussi venir après le code\n     # filter(age > 50)\n     # Il peut aussi être utilisé pour désactiver une ligne de code\ncount()"},{"path":"rbasics.html","id":"style","chapter":"1 R - les bases","heading":"Style","text":"Il est important d’être conscient de votre style de codage, surtout si\nvous travaillez en équipe. Nous préconisons le tidyverse guide de\nstyle. Il existe également des paquets\ntels que styler et lintr qui vous aident à vous conformer à ce\nstyle.Quelques points très basiques pour rendre votre code lisible pour les\nautres:\n* Lorsque vous nommez des objets, n’utilisez que des lettres\nminuscules, des chiffres et des traits de soulignement _, par exemple\nmes_donnees\n* Utilisez fréquemment des espaces, y compris autour des opérateurs,\npar exemple n = 1 et age_nouveau <- age_vieillesse + 3.","code":""},{"path":"rbasics.html","id":"exemple-de-script","chapter":"1 R - les bases","heading":"Exemple de script","text":"Vous trouverez ci-dessous un exemple d’un court script R. N’oubliez pas\nque plus vous expliquerez succinctement votre code dans les\ncommentaires, plus vos collègues vous apprécieront !","code":""},{"path":"rbasics.html","id":"r-markdown","chapter":"1 R - les bases","heading":"R markdown","text":"Un script R markdown est un type de script R dans lequel le script\nlui-même devient un document de sortie (PDF, Word, HTML, Powerpoint,\netc.). Ce sont des outils incroyablement utiles et polyvalents, souvent\nutilisés pour créer des rapports dynamiques et automatisés. Même ce site\nWeb et ce manuel sont produits à l’aide de scripts R markdown !Il convient de noter que les utilisateurs débutants de R peuvent\négalement utiliser R Markdown - ne vous laissez pas intimider !Pour en\nsavoir plus, consultez la page du manuel consacrée aux rapports avec R\nMarkdown.","code":""},{"path":"rbasics.html","id":"carnets-de-notes-r","chapter":"1 R - les bases","heading":"Carnets de notes R","text":"Il n’y pas de différence entre écrire dans un Rmarkdown et un R\nnotebook. Cependant, l’exécution du document diffère légèrement. Voir ce\nsite pour plus de détails.","code":""},{"path":"rbasics.html","id":"shiny","chapter":"1 R - les bases","heading":"Shiny","text":"Les applications/sites web Shiny sont contenus dans un script, qui doit\nêtre nommé app.R. Ce fichier comporte trois éléments :Une interface utilisateur (ui)Une fonction serveurUn appel à la fonction shinyAppConsultez la page du manuel sur les teableaux de bord avec\nShiny, ou ce tutoriel en ligne : Tutoriel\nShinyAuparavant, le fichier ci-dessus était divisé en deux fichiers (ui.R\net server.R).","code":""},{"path":"rbasics.html","id":"repli-du-code","chapter":"1 R - les bases","heading":"Repli du code","text":"Vous pouvez replier des portions de code pour rendre votre script plus\nfacile à lire.Pour ce faire, créez un en-tête de texte avec #, écrivez votre en-tête,\net faites-le suivre d’au moins 4 tirets (-), hachages (#) ou égaux (=).\nLorsque vous aurez fait cela, une petite flèche apparaîtra dans la\n“gouttière” à gauche (près du numéro de ligne). Vous pouvez cliquer sur\ncette flèche et sur le code situé en dessous jusqu’à ce que l’en-tête\nsuivant se réduise et qu’une icône à double flèche apparaisse à sa\nplace.Pour développer le code, cliquez à nouveau sur la flèche dans la\ngouttière ou sur l’icône à double flèche. Il existe également des\nraccourcis clavier, comme expliqué dans la section RStudio\nde cette page.En créant des en-têtes avec #, vous activerez également la table des\nmatières au bas de votre script (voir ci-dessous) que vous pouvez\nutiliser pour naviguer dans votre script. Vous pouvez créer des\nsous-titres en ajoutant d’autres symboles, par exemple # pour les\ntitres primaires, ## pour les titres secondaires et ### pour les\ntitres tertiaires.Vous trouverez ci-dessous deux versions d’un exemple de script. À\ngauche, l’original avec des en-têtes commentés. À droite, quatre tirets\nont été écrits après chaque en-tête, les rendant ainsi repliables. Deux\nd’entre eux ont été réduits, et vous pouvez voir que la table des\nmatières en bas de page affiche maintenant chaque section.D’autres zones de code qui sont automatiquement éligibles pour le pliage\nincluent les régions “accolées” avec des parenthèses { } telles que\nles définitions de fonctions ou les blocs conditionnels (instructions\n“else”). Vous pouvez en savoir plus sur le pliage du code sur le\nsite\nRStudio.","code":""},{"path":"rbasics.html","id":"répertoire-de-travail","chapter":"1 R - les bases","heading":"1.8 Répertoire de travail","text":"Le répertoire de travail est l’emplacement du dossier racine utilisé par\nR pour votre travail - où R recherche et enregistre les fichiers par\ndéfaut. Par défaut, il enregistrera de nouveaux fichiers et sorties à\ncet emplacement et recherchera ici des fichiers (par exemple, des\nensembles de données).Le répertoire de travail apparaît dans le texte gris en haut du volet de\nla console RStudio. Vous pouvez également imprimer le répertoire de\ntravail actuel en exécutant getwd() (laissez les parenthèses vides).","code":""},{"path":"rbasics.html","id":"approche-recommandée","chapter":"1 R - les bases","heading":"Approche recommandée","text":"Voir la page sur projets R pour plus de détails sur\nnotre approche recommandée pour gérer votre répertoire de travail.Un moyen commun, efficace et sans problème de gérer votre répertoire de\ntravail et vos chemins de fichier consiste à combiner ces trois éléments\ndans un flux de travail du projets R orienté comme\nexpliqué ci-dessous:Un projet R pour stocker tous vos fichiers (voir page sur projets\nR)Le paquet pour localiser les fichiers (voir page sur\nimporter et exporter)Le paquet rio pour importer ou exporter des fichiers (voir page\nsur importer et exporter)","code":""},{"path":"rbasics.html","id":"définir-le-répertoire-de-travail-par-commande","chapter":"1 R - les bases","heading":"Définir le répertoire de travail par commande","text":"Jusqu’à récemment, de nombreuses personnes apprenant R ont appris à\ncommencer leurs scripts avec une commande setwd(). Veuillez plutôt\nenvisager d’utiliser un flux de travail orienté par projets\nR et lire les raisons de ne pas utiliser\nsetwd().En bref, votre travail devient spécifique à votre ordinateur, les\nchemins de fichier utilisés pour importer et exporter des fichiers\ndeviennent “cassants”, ce qui entrave gravement la collaboration et\nl’utilisation de votre code sur tout autre ordinateur. Heureusement il\nexiste des alternatives faciles!Comme indiqué ci-dessus, bien que nous ne recommandons pas cette\napproche dans la plupart des cas, vous pouvez utiliser la commande\nsetwd() avec le chemin du fichier de dossier souhaité dans les\ncitations, par exemple:DANGER: Définition d’un répertoire de travail avec setwd()\npeut être “cassant” si le chemin de fichier est spécifique à un\nordinateur. Au lieu de cela, utilisez des chemins de fichier par rapport\nà un répertoire racine du projet R (avec le paquet\n).","code":"\nsetwd(\"C:/Documents/R Files/My analysis\")"},{"path":"rbasics.html","id":"définir-manuellement-le-répertoire-de-travail","chapter":"1 R - les bases","heading":"Définir manuellement le répertoire de travail","text":"Pour définir le répertoire de travail manuellement (l’équivalent\ngraphique du setwd()), cliquez sur le menu déroulant “Session” et\naccédez à “Set Working Directory”, puis “Choose Directory”. Cela\ndéfinira le répertoire de travail pour cette scéance spécifique de R.\nRemarque: Si vous utilisez cette approche, vous devrez le faire\nmanuellement chaque fois que vous ouvrez Rstudio.","code":""},{"path":"rbasics.html","id":"définir-le-répertoire-de-travail-dans-un-projet-r","chapter":"1 R - les bases","heading":"Définir le répertoire de travail dans un projet R","text":"Si vous utilisez un projet R, le répertoire de travail sera par défaut\ndans le dossier racine du projet R qui contient le fichier .rproj.\nCela s’appliquera si vous ouvrez RStudio en cliquant sur le projet R (le\nfichier avec l’extension .rproj).","code":""},{"path":"rbasics.html","id":"répertoire-de-travail-dans-un-script-r-markdown","chapter":"1 R - les bases","heading":"1.8.1 Répertoire de travail dans un script R Markdown","text":"Dans un script R Markdown, le répertoire de travail par défaut est le\ndossier ou le fichier RMarkdown (.rmd) est enregistré. Si vous\nutilisez un projet R et le paquet , cela ne s’applique pas et le\nrépertoire de travail sera (), comme expliqué dans la page\nprojets R.Si vous souhaitez modifier le répertoire de travail d’une dossier\nRMarkdown autonome (qui ne fait pas partie d’un projet R), et vous\nutilisez setwd(), cela ne s’appliquera qu’à ce morceau de code\nspécifique. Pour modifier tous les morceaux de code dans une dossier\nRMarkdown, modifiez le morceau de configuration pour ajouter le\nparamètre root.dir =, comme ci-dessous:Il est beaucoup plus facile d’utiliser simplement le script RMarkdown\ndans un projet R et d’utiliser le paquet .","code":"\nknitr::opts_knit$set(root.dir = 'desired/directorypath')"},{"path":"rbasics.html","id":"fournir-des-chemins-de-fichier","chapter":"1 R - les bases","heading":"Fournir des chemins de fichier","text":"La source de frustration la plus commune pour un débutant R (au moins\nsur un ordinateur avec Windows) est de saisir un chemin de fichier pour\nimporter ou exporter des données. Il existe une explication approfondie\nsur la meilleure façon de saisir les chemins de fichier de saisie dans\nla page importer et exporter, mais voici quelques\npoints clés:Chemins cassésVous trouverez ci-dessous un exemple de chemin de fichier “absolute”\navec un “adresse complète”. Ceux-ci se casseront probablement s’ils sont\nutilisés par un autre ordinateur. Une exception est si vous utilisez un\ndossier sur un réseau partagé.Direction de la barre obliqueSi vous saisissez un chemin de fichier, soyez conscient de la direction\ndes barres obliques. Utilisez des barres obliques vers l’avant (/)\npour séparer les composants, par exemple Data/Provincial.csv. Le\ndéfaut pour les ordinateurs avec Windows est de séparer les composants\ndu chemin avec des barres obliques en arrière (\\\\). Vous devrez donc\nmodifier la direction de chaque barre oblique. Si vous utilisez le\npaquet comme décrit dans la page projets R, la\ndirection des barres obliques n’est pas un problème.Chemins de fichiers relatifsNous recommandons généralement de utiliser des fichiers avec chemins\n“relatifs” - c’est-à-dire le chemin par rapport à la racine de votre\nprojet R. Vous pouvez le faire en utilisant le paquet comme\nexpliqué dans la page projets R. Un chemin de fichiers\nrelatif peut ressembler à ceci:Même si vous utilisez des chemins de fichiers relatifs dans un projet R,\nvous pouvez toujours utiliser des chemins absolus pour importer/exporter\ndes données en dehors de votre projet R.","code":"C:/Utilisateurs/Nom/Document/Logiciels analytiques/R/Projets/Analyse2019/data/mars2019.csv\n# Importer csv Linelist à partir de données/listes linéare/propres/sous-dossiers d'un projet R\n\nlinelist <- import(here(\"data\", \"clean\", \"linelists\", \"marin_country.csv\"))"},{"path":"rbasics.html","id":"objets","chapter":"1 R - les bases","heading":"1.9 Objets","text":"Tout dans R est un objet, et R est une langue “orienté sur l’objet”. Les\nsections suivantes expliquent:Comment créer des objets (<-)Types d’objets (par exemple, trames de données, vecteurs ..)Comment accéder à des sous-parties d’objets (par exemple, des\nvariables dans un jeu de données)Classes d’objets (ex. numérique, logique, nombres entieres, double,\ncaractère, facteur)","code":""},{"path":"rbasics.html","id":"tout-est-un-objet","chapter":"1 R - les bases","heading":"Tout est un objet","text":"Cette section est adaptée du projet\nR4Epis.\nTout ce que vous stockez dans R - des ensembles de données, des\nvariables, une liste de noms de villages, un nombre total de population,\nmême des sorties telles que des graphiques - sont des objets qui\nsont attribués à un nom et peuvent être référencés dans les\ncommandes ultérieures.Un objet existe lorsque vous lui avez attribué une valeur (voir la\nsection d’attribution ci-dessous). Lorsqu’une valeur lui est attribuée,\nl’objet apparaît dans l’environnement (voir le volet supérieur droit de\nRStudio). Il peut alors être exploité, manipulé, modifié et redéfini.","code":""},{"path":"rbasics.html","id":"définir-des-objets--","chapter":"1 R - les bases","heading":"Définir des objets (<-)","text":"Créez des objets en leur attribuant une valeur avec l’opérateur\n<-. Vous pouvez considérer l’opérateur d’affectation<- comme les\nmots “est défini comme”. Les commandes d’affectation suivent\ngénéralement un ordre standard:nom_objet <- valeur (ou processus/calcul qui produit une valeur)Par exemple, vous souhaiterez peut-être enregistrer la semaine de\nrapport épidémiologique en cours en tant qu’objet de référence dans le\ncode ultérieur. Dans cet exemple, l’objet semaine_en_cours est créé\nlorsqu’il reçoit la valeur \"2018-W10\" (les guillemets en font une\nvaleur de caractère). L’objet semaine_en_cours apparaîtra alors dans\nle volet Environnement de RStudio (en haut à droite) et pourra être\nréférencé dans les commandes ultérieures.Voir les commandes R et leur sortie dans les cases ci-dessous.NOTE: Notez que le [1] dans la sortie de la console R indique\nsimplement que vous visualisez le premier élément de la\nsortieATTENTION: La valeur d’un objet peut être écrasée à tout\nmoment en exécutant une commande d’affectation pour redéfinir sa valeur.\nAinsi, l’ordre d’exécution des commandes est très\nimportant.La commande suivante redéfinira la valeur de semaine_en_cours:Signe égal =Vous verrez également des signes égal dans le code R:Un double signe égal == entre deux objets ou valeurs pose une\nquestion logique: “est-ce égal à cela?”.Vous verrez également des signes égal dans les fonctions utilisées\npour spécifier les valeurs des arguments d’un fonction (lisez-les\ndans les sections ci-dessous), par exemple max(age, na.rm = TRUE).Vous pouvez utiliser un seul signe égal = à la place de <-\npour créer et définir des objets, mais cela est déconseillé. Vous\npouvez lire pourquoi cela est déconseillé\nici.Ensembles de donnéesLes ensembles de données sont également des objets (généralement des «\ndataframes ») et doivent recevoir des noms lors de leur importation.\nDans le code ci-dessous, l’objet linelist est créé et reçoit la valeur\nd’un fichier CSV importé avec le paquet rio et sa fonction\nimport().Vous pouvez en savoir plus sur l’importation et l’exportation\nd’ensembles de données dans la section sur importer et\nexporter.ATTENTION: Une note rapide sur la dénomination des\nobjets:Les noms d’objets ne doivent pas contenir d’espaces, mais vous devez\nutiliser un trait de soulignement (_) ou un point (.) au lieu d’un\nespace.Les noms d’objets sont sensibles à la casse (lettres majuscules et\nminuscules; ce qui signifie que Dataset_A est différent de\ndataset_A).Les noms d’objets doivent commencer par une lettre (ne peuvent pas\ncommencer par un chiffre comme 1, 2 ou 3).Les sortiesLes sorties telles que les tableaux et les tracés fournissent un exemple\nde la façon dont les sorties peuvent être enregistrées en tant qu’objets\nou simplement imprimées sans être enregistrées. Un tableau croisé du\nsexe et du résultat à l’aide de la fonction R base table() peut\nêtre imprimé directement sur la console R (sans être enregistré).La même table peut également être enregistrée en tant qu’objet nommé.\nEnsuite, éventuellement, il peut être imprimé.ColonnesLes colonnes d’un ensemble de données sont également des objets et\npeuvent être définies, écrasées et créées comme décrit ci-dessous dans\nla section sur les colonnes.Vous pouvez utiliser l’opérateur d’affectation de base R pour créer\nune nouvelle colonne. Ci-dessous, la nouvelle colonne bmi (indice de\nmasse corporelle) est créée, et pour chaque ligne la nouvelle valeur est\nle résultat d’une opération mathématique sur la valeur de la ligne dans\nles colonnes wt_kg et ht_cm.Cependant, dans ce manuel, nous mettons l’accent sur une approche\ndifférente de la définition des colonnes, qui utilise la fonction\nmutate() du package dplyr et piping avec l’opérateur pipe\n(%>%). La syntaxe est plus facile à lire et il y d’autres avantages\nexpliqués dans la page nettoyage de donnees et fonctions\nessentielles.Vous pouvez lire plus sur piping dans la section “Piping” ci-dessous.","code":"\n# Créer l'objet semaine_en_cours en lui attribuant une valeur:\nsemaine_en_cours <- \"2018-W10\"   \n\n# Imprime la valeur actuelle de l'objet semaine_en_cours dans la console:\nsemaine_en_cours## [1] \"2018-W10\"\n# Attribuer une NOUVELLE valeur à l'objet semaine_en_cours:\nsemaine_en_cours <- \"2018-W51\"\n\n# Afficher la valeur actuelle de semaine_en_cours dans la console:\nsemaine_en_cours## [1] \"2018-W51\"\n# <<linelist>> est créée et reçoit la valeur du fichier CSV importé:\nlinelist <- import(\"my_linelist.csv\")\n# Imprimé sur la console R uniquement:\ntable(linelist$gender, linelist$outcome)##    \n##     Death Recover\n##   f  1227     953\n##   m  1228     950\n# Enregistrer:\ngen_out_table <- table(linelist$gender, linelist$outcome)\n\n# Imprimer:\ngen_out_table##    \n##     Death Recover\n##   f  1227     953\n##   m  1228     950\n# Créer une nouvelle colonne \"bmi\" en utilisant la syntaxe de base R:\nlinelist$bmi <- linelist$wt_kg / (linelist$ht_cm/100)^2\n# Créer une nouvelle colonne \"bmi\" en utilisant la syntaxe dplyr:\nlinelist <- linelist %>% \n  mutate(bmi = wt_kg / (ht_cm/100)^2)"},{"path":"rbasics.html","id":"structure-dobjet","chapter":"1 R - les bases","heading":"Structure d’objet","text":"Les objets peuvent être une seule donnée (par exemple, “mon_numéro <-\n24”), ou ils peuvent être constitués de données structurées.Le graphique ci-dessous est emprunté à ce tutoriel R en\nligne. Il montre\ncertaines structures de données courantes et leurs noms. Les données\nspatiales ne sont pas incluses dans cette image, qui sont abordées dans\nla page bases de GIS.En épidémiologie (et en particulier en épidémiologie de terrain), vous\nrencontrerez le plus souvent des trames de données et des vecteurs:Notez que pour créer un vecteur “autonome” (ne faisant pas partie d’un\nbloc de données), la fonction c() est utilisée pour combiner les\ndifférents éléments. Par exemple, si vous créez un vecteur de couleurs à\nappliquer à l’échelle de couleurs d’un tracé:vector_of_colors <- c(\"blue\", \"red2\", \"orange\", \"grey\")","code":""},{"path":"rbasics.html","id":"classes-dobjets","chapter":"1 R - les bases","heading":"Classes d’objets","text":"Tous les objets stockés dans R ont une classe qui indique à R comment\ngérer l’objet. Il existe de nombreuses classes possibles, mais les plus\ncourantes incluent:*Exemples**Vous pouvez tester la classe d’un objet en fournissant son nom à la\nfonction class(). Remarque : vous pouvez référencer une colonne\nspécifique dans un jeu de données en utilisant la notation «$» pour\nséparer le nom du jeu de données et le nom de la colonne.Parfois, une colonne sera automatiquement convertie dans une classe\ndifférente par R. Attention à cela ! Par exemple, si vous avez un\nvecteur ou une colonne de nombres, mais qu’une valeur de caractère est\ninsérée; toute la colonne deviendra un caractère de classe.Un exemple courant de ceci est lors de la manipulation d’un bloc de\ndonnées afin d’imprimer un tableau. Si vous faites une ligne totale et\nessayez de coller/coller ensemble des pourcentages dans la même cellule\nque des nombres (par exemple 23 (40%)), le toute la colonne numérique\nci-dessus sera convertie en caractère et ne pourra plus être utilisée\npour des calculs mathématiques. Parfois, vous devrez convertir des\nobjets ou des colonnes dans une autre classe.Convertit en classe “facteur”Remarque: la redéfinition de l’ordre des\nniveaux de valeur nécessite des arguments\nsupplémentairesDe même, il existe des fonctions base R pour vérifier si un objet\nEST d’une classe spécifique, comme .numeric(), .character(),\n.double(), .facteur(), .integer()Voici plus de matériel en ligne sur les classes et les structures de\ndonnées dans\nR.","code":"\n# La classe doit être une trame de données ou un tibble:\nclass(linelist)         ## [1] \"data.frame\"\n# La classe doit être numérique:\nclass(linelist$age)## [1] \"numeric\"\n# La classe doit être caractère:\nclass(linelist$gender)## [1] \"character\"\n# Définir le vecteur avec des numéros:\nnum_vector <- c(1,2,3,4,5) \n\n# Le vecteur est de classe \"numérique\":\nclass(num_vector)          ## [1] \"numeric\"\n# Convertir le troisième élément en caractère:\nnum_vector[3] <- \"three\"   \n\n# Le vecteur est maintenant de classe \"caractère\"\nclass(num_vector)          ## [1] \"character\""},{"path":"rbasics.html","id":"colonnesvariables","chapter":"1 R - les bases","heading":"Colonnes/Variables ($)","text":"Une colonne dans un bloc de données est techniquement un “vecteur”\n(voir tableau ci-dessus) - une série de valeurs qui doivent toutes\nêtre de la même classe (caractère, numérique, logique, etc.).Un vecteur peut exister indépendamment d’un bloc de données, par exemple\nun vecteur de noms de colonnes que vous souhaitez inclure en tant que\nvariables explicatives dans un modèle. Pour créer un vecteur “autonome”,\nutilisez la fonction c() comme ci-dessous:Les colonnes d’un bloc de données sont également des vecteurs et\npeuvent être appelées, référencées, extraites ou créées à l’aide du\nsymbole $. Le symbole $ relie le nom de la colonne au nom de son\nbloc de données. Dans ce manuel, nous essayons d’utiliser le mot\n“colonne” au lieu de “variable”.En tapant le nom de la trame de données suivi de $, vous verrez\négalement un menu déroulant de toutes les colonnes de la trame de\ndonnées. Vous pouvez les faire défiler à l’aide de votre touche fléchée,\nen sélectionner une avec votre touche Entrée et éviter les fautes\nd’orthographe !CONSEIL AVANCÉ: Certains objets plus complexes (par exemple, une\nliste ou un objet epicontacts) peuvent avoir plusieurs niveaux\naccessibles via plusieurs signes dollar. Par exemple\nepicontacts$linelist$date_onset","code":"\n# Définir le vecteur autonome des valeurs de classe caractère:\nvar_explicatives <- c(\"gender\", \"fever\", \"chills\", \"cough\", \"aches\", \"vomit\")\n\n# Affiche les valeurs dans ce vecteur nommé:\nvar_explicatives## [1] \"gender\" \"fever\"  \"chills\" \"cough\"  \"aches\"  \"vomit\"\n# Récupérer la longueur du vecteur age:\nlength(linelist$age) # (l'âge est une colonne dans le bloc de données nomé \"linelist\")"},{"path":"rbasics.html","id":"accèsindex-avec-crochets","chapter":"1 R - les bases","heading":"Accès/index avec crochets ([ ])","text":"Vous devrez peut-être afficher des parties d’objets, également appelées\n“indexation”, ce qui se fait souvent à l’aide des crochets [ ].\nL’utilisation de $ sur une trame de données pour accéder à une colonne\nest également un type d’indexation.Les crochets fonctionnent également pour renvoyer des parties\nspécifiques d’une sortie renvoyée, comme la sortie d’une fonction\nsummary():Les crochets fonctionnent également sur les blocs de données pour\nafficher des lignes et des colonnes spécifiques. Vous pouvez le faire en\nutilisant la syntaxe dataframe[lignes, colonnes]:Notez que vous pouvez également réaliser l’indexation des\nlignes/colonnes ci-dessus sur les blocs de données et les tibbles en\nutilisant la syntaxe dplyr (fonctions filter() pour les lignes et\nselect() pour les colonnes). Pour en savoir plus sur ces fonctions\nprincipales, consultez la page sur le nettoyage de deonnees et\nfonctions essentielles.Pour filtrer en fonction du “numéro de ligne”, vous pouvez utiliser la\nfonction dplyr row_number() avec des parenthèses ouvertes dans le\ncadre d’une instruction de filtrage logique. Vous utiliserez souvent\nl’opérateur %% et une plage de nombres dans le cadre de cette\ninstruction logique, comme indiqué ci-dessous. Pour voir les premières\nN lignes, vous pouvez également utiliser la fonction spéciale dplyr\nhead().Lors de l’indexation d’un objet de classe list, les crochets simples\nretournent toujours avec la classe list, même si un seul objet est\nretourné. Les crochets doubles, cependant, peuvent être utilisés pour\naccéder à un seul élément et renvoyer une classe différente de la\nliste.\nLes parenthèses peuvent également être écrites les unes après les\nautres, comme illustré ci-dessous.Cette explication visuelle de l’indexation des listes, avec des\npoivrières est\nhumoristique et utile.Voici à quoi ressemble la liste lorsqu’elle est imprimée sur la console.\nVoyez comment il y deux éléments nommés:hôpitaux, un vecteur de caractèresadresses, une trame de données d’adressesMaintenant, nous extrayons, en utilisant diverses méthodes:","code":"\n# Définir le vecteur:\nmon_vecteur <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")\n\n# Imprimer le 5ème élément:\nmon_vecteur[5]## [1] \"e\"\n# Tout le résumé\nsummary(linelist$age)##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n##    0.00    6.00   13.00   16.07   23.00   84.00      86\n# Juste le deuxième élément du résumé, avec le nom (en utilisant uniquement des crochets simples)\nsummary(linelist$age)[2]## 1st Qu. \n##       6\n# Juste le deuxième élément, sans nom (en utilisant des doubles crochets)\nsummary(linelist$age)[[2]]## [1] 6\n# Extraire un élément par son nom, sans afficher le nom\nsummary(linelist$age)[[\"Median\"]]## [1] 13\n# Afficher une ligne spécifique (2) du jeu de données, avec toutes les colonnes \n# (n'oubliez pas la virgule!)\nlinelist[2,]\n\n# Afficher toutes les lignes, mais une seule colonne:\nlinelist[, \"date_onset\"]\n\n# Afficher les valeurs de la ligne 2 et des colonnes 5 à 10:\nlinelist[2, 5:10]\n\n# Afficher les valeurs de la ligne 2 et des colonnes 5 à 10 et 18:\nlinelist[2, c(5:10, 18)]\n\n# Afficher les lignes 2 à 20 et des colonnes spécifiques:\nlinelist[2:20, c(\"date_onset\", \"outcome\", \"age\")]\n\n# Afficher les lignes et les colonnes en fonction de critères\n# *** Notez que le dataframe doit toujours être nommé dans les critères!\nlinelist[linelist$age > 25 , c(\"date_onset\", \"outcome\", \"age\")]\n\n# Utilisez View() pour voir les sorties dans le volet RStudio Viewer (plus facile à lire)\n# *** Notez le \"V\" majuscule dans la fonction View()\nView(linelist[2:20, \"date_onset\"])\n\n# Enregistrer en tant que nouvel objet:\nnew_table <- linelist[2:20, c(\"date_onset\")]\n# Afficher les 100 premières lignes:\nlinelist %>% \n     head(100)\n\n# Afficher la ligne 5 uniquement:\nlinelist %>% \n     filter(row_number() == 5)\n\n# Afficher les lignes 2 à 20 et trois colonnes spécifiques \n# (notez qu'aucun guillemet n'est nécessaire sur les noms de colonne)\nlinelist %>% \n     filter(row_number() %in% 2:20) %>% \n     select(date_onset, issue, age)\n# définir la liste des démos\nma_liste <- list(\n   # Le premier élément de la liste est un vecteur de caractères:\n   hopitaux = c(\"Central\", \"Empire\", \"Santa Anna\"),\n  \n   # Le deuxième élément de la liste est une trame de données d'adresses:\n   adresses = data.frame(\n     rue = c(\"145 Medical Way\", \"1048 Brown Ave\", \"999 El Camino\"),\n     ville = c(\"Andover\", \"Hamilton\", \"El Paso\")\n     )\n   )\nma_liste## $hopitaux\n## [1] \"Central\"    \"Empire\"     \"Santa Anna\"\n## \n## $adresses\n##               rue    ville\n## 1 145 Medical Way  Andover\n## 2  1048 Brown Ave Hamilton\n## 3   999 El Camino  El Paso\n# Cela renvoie l'élément dans la classe \"list\" - le nom de l'élément est toujours affiché:\nma_liste[1] ## $hopitaux\n## [1] \"Central\"    \"Empire\"     \"Santa Anna\"\n# Cela ne renvoie que le vecteur de caractères (sans nom):\nma_liste[[1]]## [1] \"Central\"    \"Empire\"     \"Santa Anna\"\n# Vous pouvez également indexer par le nom de l'élément de la liste:\nma_liste[[\"hopitaux\"]]## [1] \"Central\"    \"Empire\"     \"Santa Anna\"\n# Cela renvoie le troisième élément du vecteur de caractères \"hôpitaux\":\nma_liste[[1]][3] ## [1] \"Santa Anna\"\n# Cela renvoie la première colonne (\"rue\") de la trame de données d'adresse:\nma_liste[[2]][1]##               rue\n## 1 145 Medical Way\n## 2  1048 Brown Ave\n## 3   999 El Camino"},{"path":"rbasics.html","id":"supprimer-des-objets","chapter":"1 R - les bases","heading":"Supprimer des objets","text":"Vous pouvez supprimer des objets individuels de votre environnement R en\nmettant le nom dans la fonction rm() (sans guillemets):Vous pouvez supprimer tous les objets (vider votre espace de travail) en\nexécutant:","code":"\nrm(nom_objet)\nrm(list = ls(all = TRUE))"},{"path":"rbasics.html","id":"tuyauterie-piping","chapter":"1 R - les bases","heading":"1.10 Tuyauterie / “Piping” (%>%)","text":"Deux approches générales pour travailler avec des objets sont:Pipes/tidyverse - les tuyaux envoient un objet d’une fonction à\nl’autre - l’accent est mis sur l’action, pas sur l’objetDéfinir les objets intermédiaires - un objet est redéfini encore\net encore - l’accent est mis sur l’objet","code":""},{"path":"rbasics.html","id":"tuyaux-pipes","chapter":"1 R - les bases","heading":"Tuyaux / Pipes","text":"** Expliqué simplement, l’opérateur pipe (%>%) passe une sortie\nintermédiaire d’une fonction à la suivante. **\nVous pouvez penser que cela signifie “alors”. De nombreuses fonctions\npeuvent être liées avec %>%.Le tuyau met l’accent sur une séquence d’actions, et non sur\nl’objet sur lequel les actions sont effectuéesLes tuyaux sont plus efficaces lorsqu’une séquence d’actions doit\nêtre effectuée sur un objetLes tuyaux proviennent du paquet magrittr, qui est\nautomatiquement inclus dans les paquets dplyr et tidyverseLes tuyaux peuvent rendre le code plus propre et plus facile à lire,\nplus intuitifEn savoir plus sur cette approche dans le tidyverse guide de\nstyleVoici un faux exemple de comparaison, utilisant des fonctions fictives\npour “faire un gâteau”. Tout d’abord, la méthode du tuyau:Voici un autre\nlien\ndécrivant l’utilitaire de tuyaux.La tuyauterie n’est pas une fonction de base en R. Pour utiliser la\ntuyauterie, le paquet magrittr doit être installé et chargé (cela se\nfait généralement en chargeant le paquet tidyverse ou dplyr qui\nl’inclut). Vous pouvez en savoir plus sur la tuyauterie dans la\ndocumentation de magrittr.Notez que, tout comme les autres commandes R, les tuyaux peuvent être\nutilisés pour afficher simplement le résultat ou pour\nenregistrer/réenregistrer un objet, selon que l’opérateur d’affectation\n<- est impliqué ou non. Voir les deux exemplaires ci-dessous:%<>%\nIl s’agit d’un “tuyau d’affectation” du paquet magrittr, qui\ntransmet un objet en avant et redéfinit également l’objet. Il doit\nêtre le premier opérateur pipe de la chaîne. C’est un raccourci. Les\ndeux commandes ci-dessous sont équivalentes:","code":"\n# Un faux exemple de comment faire cuire un gâteau en utilisant la syntaxe de tuyauterie:\n\ngateau <- farine %>% # pour définir le gâteau, commencez par la farine, puis...\n     # ajouter des oeufs\n     add(oeufs) %>% \n     # ajouter de l'huile\n     add(huile) %>% \n     # ajouter de l'eau\n     add(eau) %>% \n     # mélanger ensemble avec cuillère pour 2 minutes:\n     mix_together(\n          ustensil = \"spoon\",\n          minutes = 2) %>%\n     # cuire à 200 degrés centigrade pour 35 minutes:\n     bake(\n          degrees = 200, \n          system = \"centigrade\",\n          minute = 35) %>%\n     # laissez-le refroidir\n     let_cool() \n# Créer ou écraser un objet, en le définissant sous \n# forme de nombres agrégés par catégorie d'âge (non imprimé)\nlinelist_summary <- linelist %>% \n  count(age_cat)\n# Imprimez le tableau des comptes dans la console, mais ne l'enregistrez pas:\nlinelist %>% \n  count(age_cat)##   age_cat    n\n## 1     0-4 1095\n## 2     5-9 1095\n## 3   10-14  941\n## 4   15-19  743\n## 5   20-29 1073\n## 6   30-49  754\n## 7   50-69   95\n## 8     70+    6\n## 9    <NA>   86\n# Utilisez l'opérateur d'affectation:\nlinelist <- linelist %>%\n  filter(age > 50)\n\n# Utilisez le tuyau d'affectation:\nlinelist %<>% filter(age > 50)"},{"path":"rbasics.html","id":"définir-les-objets-intermédiaires","chapter":"1 R - les bases","heading":"Définir les objets intermédiaires","text":"Cette approche de modification des objets ou trammes de données peut\nêtre meilleure si:Vous devez manipuler plusieurs objetsIl y des étapes intermédiaires qui sont significatives et méritent\ndes noms d’objets séparésDes risques:Créer de nouveaux objets pour chaque étape signifie créer beaucoup\nd’objets. Si vous utilisez le mauvais, vous ne vous en rendrez\npeut-être pas compte!Nommer tous les objets peut prêter à confusionLes erreurs peuvent ne pas être facilement détectablesSoit nommer chaque objet intermédiaire, soit écraser l’original, soit\ncombiner toutes les fonctions ensemble. Tous viennent avec leurs propres\nrisques.Vous trouverez ci-dessous le même exemple de faux “gâteau” que\nci-dessus, mais en utilisant ce style:Combinez toutes les fonctions ensemble - c’est difficile à lire :","code":"\n# un faux exemple de comment faire un gâteau en utilisant cette méthode \n# (définissant des objets intermédiaires):\n\n# Ajouter le farine et les oeufs:\npate_1 <- left_join(farine, oeufs)\n\n# Ajouter l'huile:\npate_2 <- left_join (pate_1, huile)\n\n# Ajouter l'eau:\npate_3 <- left_join(pate_2, eau)\n\n# Melange tous ensemble:\npate_4 <- mix_together(object = pate_3, \n                       ustensil = \"spoon\", \n                       minutes = 2)\n\n# Cuire le gâteau dans le four:\ngateau <-bake(object = pate_4, \n              degrees = 200, \n              system = \"centigrade\", \n              minutes = 35)\n\n# Laissez-le à refroidir:\ngateau <- let_cool(gateau)\n# Un exemple de combinaison/imbrication de plusieurs fonctions - difficile à lire:\ngateau <- let_cool(bake(mix_together(pate_3, \n                                     utensil = \"spoon\", \n                                     minutes = 2), \n                        degrees = 200, \n                        system = \"centigrade\",\n                        minutes = 35))"},{"path":"rbasics.html","id":"operators","chapter":"1 R - les bases","heading":"1.11 Opérateurs clés et fonctions","text":"Cette section détaille les opérateurs dans R, tels que:Opérateurs définitionnelsOpérateurs relationnels (inférieur à, égal aussi..)Opérateurs logiques (et, ou…)Gestion des valeurs manquantesOpérateurs et fonctions mathématiques (+/-, >, sum(), median(),\n…)L’opérateur %%","code":""},{"path":"rbasics.html","id":"opérateurs-daffectation","chapter":"1 R - les bases","heading":"Opérateurs d’affectation","text":"<-L’opérateur d’affectation de base dans R est <-. Tel que\nnom_objet <- valeur.\nCet opérateur d’affectation peut également être écrit comme =. Nous\nvous conseillons d’utiliser <- pour une utilisation générale de R.\nNous conseillons également d’entourer ces opérateurs d’espaces, pour\nplus de lisibilité.<<-Si Fonctions d’écriture, ou si vous utilisez R de\nmanière interactive avec des scripts sourcés, vous devrez peut-être\nutiliser cet opérateur d’affectation <<- (de base R). Cet\nopérateur est utilisé pour définir un objet dans un environnement R «\nparent » supérieur. Voir ceci référence en\nligne.%<>%Il s’agit d’un “tuyau d’affectation” du paquet magrittr, qui dirige\nun objet vers l’avant et redéfinit également l’objet. Il doit être le\npremier opérateur pipe de la chaîne. Il s’agit d’un raccourci.%<+%Ceci est utilisé pour ajouter des données aux arbres phylogénétiques\navec le package ggtree. Voir la page sur les arbres\nphylogénétiques ou ce livre de ressources en\nligne.","code":""},{"path":"rbasics.html","id":"opérateurs-relationnels-et-logiques","chapter":"1 R - les bases","heading":"Opérateurs relationnels et logiques","text":"Les opérateurs relationnels comparent les valeurs et sont souvent\nutilisés lors de la définition de nouvelles variables et de\nsous-ensembles des blocs de données. Voici les opérateurs relationnels\ncourants dans R:*Exem\nple**FALSE (parce que R est\nsensible à la casse)Notez que == (double égal)\nest différent de = (simple\négal), qui agit comme\nl’opérateur d’affectation <-Les opérateurs logiques, tels que ET et OU, sont souvent utilisés pour\nconnecter des opérateurs relationnels et créer des critères plus\ncomplexes. Les instructions complexes peuvent nécessiter des parenthèses\n( ) pour le regroupement et l’ordre d’application.Par exemple, ci-dessous, nous avons une liste linéaire avec deux\nvariables que nous voulons utiliser pour créer notre définition de cas,\nresultat_tdr, un résultat d’un test rapide, et autres_cas_menage,\nqui nous dira s’il y d’autres cas dans le ménage. La commande\nci-dessous utilise la fonction case_when() pour créer la nouvelle\nvariable case_def telle que:Si la valeur dans resultat_tdr n’est pas\n“Positive” ETla valeur dans autres_cas_menage est “Oui”Notez que R est sensible à la casse, donc “Positif” est différent de\n“positif”…","code":"\nlinelist_propre <- linelist %>%\n  mutate(case_def = case_when(\n    is.na(resultat_tdr) & is.na(autres_cas_menage)             ~ NA_character_,\n    resultat_tdr == \"Positive\"                                 ~ \"Confirmé\",\n    resultat_tdr != \"Positive\" & other_cases_in_home == \"Oui\"  ~ \"Probable\",\n    TRUE                                                       ~ \"Suspect\"\n  ))"},{"path":"rbasics.html","id":"valeurs-manquantes","chapter":"1 R - les bases","heading":"Valeurs manquantes","text":"Dans R, les valeurs manquantes sont représentées par la valeur spéciale\nNA (une valeur “réservée”) (lettres majuscules N et - pas entre\nguillemets). Si vous importez des données qui enregistrent des données\nmanquantes d’une autre manière (par exemple, 99, “Missing” ou .), vous\npouvez recoder ces valeurs en “NA”. La procédure à suivre est expliquée\ndans la page importer et exporter.Pour tester si une valeur est NA, utilisez la fonction spéciale\n.na(), qui renvoie TRUE ou FALSE.En savoir plus sur les valeurs manquantes, infinies, NULL et\nimpossibles dans la page sur les valeur manquantes.\nDécouvrez comment convertir les valeurs manquantes lors de l’importation\nde données dans la page sur importer et exporter.","code":"\n# 2 cas positives, un suspect et un inconnu:\nresultat_tdr <- c(\"Positive\", \"Suspect\", \"Positive\", NA)   \n\n# Verifier si il y' a des valeurs manquantes:\nis.na(resultat_tdr)## [1] FALSE FALSE FALSE  TRUE"},{"path":"rbasics.html","id":"mathématiques-et-statistiques","chapter":"1 R - les bases","heading":"Mathématiques et statistiques","text":"Tous les opérateurs et fonctions de cette page sont automatiquement\ndisponibles en utilisant base R.","code":""},{"path":"rbasics.html","id":"opérateurs-mathématiques","chapter":"1 R - les bases","heading":"Opérateurs mathématiques","text":"Ceux-ci sont souvent utilisés pour effectuer des additions, des\ndivisions, pour créer de nouvelles colonnes, etc. Vous trouverez\nci-dessous des opérateurs mathématiques courants dans R. Que vous\nmettiez des espaces autour des opérateurs n’est pas important.","code":""},{"path":"rbasics.html","id":"fonctions-mathématiques","chapter":"1 R - les bases","heading":"Fonctions mathématiques","text":"Remarque: pour round(), les digits = spécifient le nombre de\ndécimales placées. Utilisez signif() pour arrondir à un nombre de\nchiffres significatifs.","code":""},{"path":"rbasics.html","id":"notation-scientifique","chapter":"1 R - les bases","heading":"Notation scientifique","text":"La probabilité d’utilisation de la notation scientifique dépend de la\nvaleur de l’option “scipen”.D’après la documentation de ?options: scipen est une pénalité à\nappliquer lors de la décision d’imprimer des valeurs numériques en\nnotation fixe ou exponentielle. Les valeurs positives tendent vers la\nnotation fixe et négatives vers la notation scientifique: la notation\nfixe sera préférée à moins qu’elle ne soit plus large de plus de\n‘scipen’.S’il est réglé sur un nombre faible (par exemple 0), il sera toujours\n“allumé”. Pour “désactiver” la notation scientifique dans votre session\nR, définissez-la sur un nombre très élevé, par exemple:","code":"\n# Désactiver la notation scientifique\noptions(scipen = 999)"},{"path":"rbasics.html","id":"arrondi","chapter":"1 R - les bases","heading":"Arrondi","text":"DANGER: round() utilise “l’arrondi du banquier” qui arrondit à\npartir de 0,5 uniquement si le nombre supérieur est pair. Utilisez\nround_half_up() de janitor pour arrondir systématiquement les\nmoitiés au nombre entier le plus proche. Voir cette\nexplication","code":"\n# Fonction d'arrondi avec R de base:\nround(c(2.5, 3.5))## [1] 2 4\n# Fonction d'arrondi du paquet \"janitor\":\njanitor::round_half_up(c(2.5, 3.5))## [1] 3 4"},{"path":"rbasics.html","id":"fonctions-statistiques","chapter":"1 R - les bases","heading":"Fonctions statistiques","text":"ATTENTION: Les fonctions ci-dessous incluront par défaut les\nvaleurs manquantes dans les calculs. Les valeurs manquantes entraîneront\nune sortie de NA, sauf si l’argument na.rm = TRUE est spécifié. Cela\npeut être écrit en raccourci comme na.rm = T.Remarques:*quantile(): x est le vecteur numérique à examiner et probs =\nest un vecteur numérique avec des probabilités comprises entre 0 et\n1,0, par exemple c(0,5, 0,8, 0,85)**summary(): donne un résumé sur un vecteur numérique comprenant\nla moyenne, la médiane et les centiles communsDANGER: Si vous fournissez un vecteur de nombres à l’une des\nfonctions ci-dessus, assurez-vous d’envelopper les nombres dans\nc().","code":"\n# Si vous fournissez des nombres bruts à une fonction, \n# enveloppez-les dans c():\n\n# !!! ERREUR !!!\nmean(1, 6, 12, 10, 5, 0)      ## [1] 1\n# CORRECT\nmean(c(1, 6, 12, 10, 5, 0)) ## [1] 5.666667"},{"path":"rbasics.html","id":"autres-fonctions-utiles","chapter":"1 R - les bases","heading":"Autres fonctions utiles","text":"","code":""},{"path":"rbasics.html","id":"in","chapter":"1 R - les bases","heading":"%in%","text":"Un opérateur très utile pour faire correspondre les valeurs et pour\névaluer rapidement si une valeur se trouve dans un vecteur ou une trame\nde données:Pour demander si une valeur n’est pas %% un vecteur, placez un\npoint d’exclamation (!) devant l’instruction logique:%% est très utile lors de l’utilisation de la fonction dplyr\ncase_when(). Vous pouvez définir un vecteur précédemment, puis le\nréférencer ultérieurement. Par exemple:Remarque: Si vous souhaitez détecter une chaîne partielle, en utilisant\npeut-être str_detect() de stringr, il n’acceptera pas un vecteur\nde caractères tel que c(\"1\", \"Oui\", \"oui\", \"y \"). Au lieu de cela, il\ndoit recevoir une expression régulière - une chaîne condensée avec des\nbarres OU, telle que “1|Oui|oui|y”. Par exemple,\nstr_detect(hospitalisé, \"1|Oui|oui|y\"). Voir la page sur les\ncaractères et les chaîne de caractères pour plus\nd’informations.Vous pouvez convertir un vecteur de caractères en une expression\nrégulière nommée avec cette commande:","code":"\nmon_vecteur <- c(\"a\", \"b\", \"c\", \"d\")\n\"a\" %in% mon_vecteur## [1] TRUE\n\"h\" %in% mon_vecteur## [1] FALSE\n# Pour nier, mettre une exclamation devant:\n!\"a\" %in% mon_vecteur## [1] FALSE\n!\"h\" %in% mon_vecteur## [1] TRUE\naffirmative <- c(\"1\", \"Yes\", \"YES\", \"yes\", \"y\", \"Y\", \"oui\", \"Oui\", \"Si\")\n\nlinelist <- linelist %>% \n  mutate(enfant_hospitalise = case_when(\n    hospitalise %in% affirmative & age < 18 ~ \"Hospitalized Child\",\n    TRUE                                    ~ \"Not\"))\naffirmative <- c(\"1\", \"Yes\", \"YES\", \"yes\", \"y\", \"Y\", \"oui\", \"Oui\", \"Si\")\naffirmative## [1] \"1\"   \"Yes\" \"YES\" \"yes\" \"y\"   \"Y\"   \"oui\" \"Oui\" \"Si\"\n# Condenser à: \naffirmative_str_search <- paste0(affirmative, collapse = \"|\")  # option avec R de base\naffirmative_str_search <- str_c(affirmative, collapse = \"|\")   # option avec le paquet stringr\n\naffirmative_str_search## [1] \"1|Yes|YES|yes|y|Y|oui|Oui|Si\""},{"path":"rbasics.html","id":"erreurs-et-avertissements","chapter":"1 R - les bases","heading":"1.12 Erreurs et avertissements","text":"Cette section explique :La différence entre les erreurs et les avertissementsConseils généraux de syntaxe pour l’écriture de code RAides au codeLes erreurs et avertissements courants ainsi que des conseils de\ndépannage sont disponibles sur la page erreurs frequentes.","code":""},{"path":"rbasics.html","id":"erreur-contre-avertissement","chapter":"1 R - les bases","heading":"Erreur contre avertissement","text":"Lorsqu’une commande est exécutée, la console R peut afficher des\nmessages d’avertissement ou d’erreur en texte rouge.Un avertissement signifie que R terminé votre commande, mais \ndû prendre des mesures supplémentaires ou produit une sortie\ninhabituelle dont vous devez être conscient.Un avertissement signifie que R terminé votre commande, mais \ndû prendre des mesures supplémentaires ou produit une sortie\ninhabituelle dont vous devez être conscient.Une erreur signifie que R n’pas pu terminer votre commande.Une erreur signifie que R n’pas pu terminer votre commande.Cherchez des indices:Le message d’erreur/d’avertissement inclura souvent un numéro de\nligne pour le problème.Le message d’erreur/d’avertissement inclura souvent un numéro de\nligne pour le problème.Si un objet “est inconnu” ou “introuvable”, vous l’avez peut-être\nmal orthographié, vous avez oublié d’appeler un package avec\nlibrary() ou vous avez oublié de relancer votre script après avoir\napporté des modifications.Si un objet “est inconnu” ou “introuvable”, vous l’avez peut-être\nmal orthographié, vous avez oublié d’appeler un package avec\nlibrary() ou vous avez oublié de relancer votre script après avoir\napporté des modifications.Si tout le reste échoue, copiez le message d’erreur dans Google avec\nquelques termes clés - il y de fortes chances que quelqu’un d’autre\nait déjà travaillé dessus!","code":""},{"path":"rbasics.html","id":"conseils-généraux-sur-la-syntaxe","chapter":"1 R - les bases","heading":"Conseils généraux sur la syntaxe","text":"Quelques points à retenir lors de l’écriture de commandes dans R, pour\néviter les erreurs et les avertissements:Fermez toujours les parenthèses - astuce: comptez le nombre de “(”\net de parenthèses fermantes “)” pour chaque bloc de codeÉvitez les espaces dans les noms de colonnes et d’objets. Utilisez\nle trait de soulignement ( _ ) ou les points ( . ) à la placeGardez une trace et n’oubliez pas de séparer les arguments d’une\nfonction par des virgulesR est sensible à la casse, ce qui signifie que Variable_A est\ndifférent de Variable_a","code":""},{"path":"rbasics.html","id":"aides-au-code","chapter":"1 R - les bases","heading":"Aides au code","text":"N’importe quel script (RMarkdown ou autre) donnera des indices lorsque\nvous avez fait une erreur. Par exemple, si vous avez oublié d’écrire une\nvirgule là où c’est nécessaire, ou de fermer une parenthèse, RStudio\nlèvera un drapeau sur cette ligne, sur le côté droit du script, pour\nvous avertir.","code":""}]
